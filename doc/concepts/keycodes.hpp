#pragma once

#include <cstdint>

namespace ny
{

//Modeled after linux/input.h
//
//Note that the keycodes therefore directly match with the linux keycodes defined
//in linux/input.h. They are also similiarly named.
//Keys which names cannot be used as enum name are usually changed a bit.
//If there is no possiblity to change the name (like e.g. for number keys 0-9) they
//have a k (like key) prefix.

//Note that e.g. Keycode::a should never be treated as if the user pressed a keyboard
//button labeled 'A'. The keycodes are only a platform and device independent way of
//representing hardware keys that could be located on a standard us keyboard.
//For keyboards with other character sets (like e.g. japanese or russian keyboards)
//Keycode::a will be generated when the key that is at the location where the 'A' key
//would be on an us keyboard. But that does neither mean that the key that was pressed
//is labeled 'A' nor that the user does now expect to e.g. see an 'A' on screen.
//One should not try to e.g. give keycodes names and represent them to the user
//in any way e.g. as application controls (which seems to make sense first, but
//users may not have any idea how to press the 'W' key for moving forward
//when they have a japanese keyboard).

//Keycodes are therefore pretty useless, they just offer a way represent certain
//hardware key locations as plain numbers. Keycodes can be used to determine the actual
//key the user expects the application to deal with using a keyboard layout and a keyboard
//state. These 'actual keys' are named keysyms are ny represents them using either a
//unicode value or a value of the Key enumeration.
enum class Keycode : std::uint32_t
{
	none = 0,
	esc,

	k1,
	k2,
	k3,
	k4,
	k5,
	k6,
	k7,
	k8,
	k9,
	k0,
	minus,
	equal,
	backspace,
	tab,

	q,
	w,
	e,
	r,
	t,
	y,
	u,
	i,
	o,
	p,
	leftbrace,
	rightbrace,
	enter,
	leftctrl,

	a,
	s,
	d,
	f,
	g,
	h,
	j,
	k,
	l,
	semicolon,
	aporstrophe,
	grave,
	leftshift,
	backslash,

	z,
	x,
	c,
	v,
	b,
	n,
	m,
	comma,
	dot,
	slash,
	rightshift,
	kpasterisk,
	leftalt,
	space,
	capslock,

	f1,
	f2,
	f3,
	f4,
	f5,
	f6,
	f7,
	f8,
	f9,
	f10,

	numlock,
	scrollock,
	kp7,
	kp8,
	kp9,
	kpminus,
	kp4,
	kp5,
	kp6,
	kpplus,
	kp1,
	kp2,
	kp3,
	kp0,
	kpdot,

	hankaku = 85,
	k102,
	f11,
	f12,
	ro,
	katakana,
	hiragana,
	henkan,
	katakanahiragana,
	muhenkan,
	kpjpcomma,
	kpenter,
	rightctrl,
	kpslash,
	sysrq,
	rightalt,
	linefeed,
	home,
	up,
	pageup,
	left,
	right,
	end,
	down,
	pagedown,
	insert,
	del,
	macro,
	mute,
	volumedown,
	volumeup,
	power,
	kpequal,
	kpplusminus,
	pause,
	scale,
	kpcomma,
	hangeul,
	hanguel = hangeul,
	hanja,
	yen,
	leftmeta,
	rightmeta,
	compose,
	stop,
	again,
	props,
	undo,
	front,
	copy,
	open,
	paste,
	find,
	cut,
	help,
	menu,
	calc,
	setup,
	sleep,
	wakeup,
	file,
	sendfile,
	deletefile,
	xfer,
	prog1,
	prog2,
	www,
	msdos,
	coffee,
	screenlock = coffee,
	rotateDisplay,
	diretion = rotateDisplay,
	cyclewindows,
	mail,
	bookmarks,
	computer,
	back,
	forward,
	closecd,
	ejectcd,
	ejectclosecd,
	nextsong,
	playpause,
	previoussong,
	stopcd,
	record,
	rewind,
	phone,
	iso,
	config,
	homepage,
	refresh,
	exit,
	move,
	edit,
	scrollup,
	scrolldown,
	kpleftparen,
	kprightparen,
	knew,
	redo,
	f13,
	f14,
	f15,
	f16,
	f17,
	f18,
	f19,
	f20,
	f21,
	f22,
	f23,
	f24,

	playcd = 200,
	pausecd,
	prog3,
	prog4,
	dashboard,
	suspend,
	close,
	play,
	fastforward,
	bassboost,
	print,
	hp,
	camera,
	sound,
	question,
	email,
	chat,
	search,
	connect,
	finance,
	sport,
	shop,
	alterase,
	cancel,
	brightnessdown,
	brightnessup,
	media,
	switchvideomode,
	kbdillumtoggle,
	kbdillumdown,
	kbdillumup,
	send,
	reply,
	forwardmail,
	save,
	documents,
	battery,
	bluetooh,
	wlan,
	uwb,
	unkown,
	videoNext,
	videoPrev,
	brightnessCycle,
	brightnessAuto,
	brightnessZero = brightnessAuto,
	displayOff,
	wwan,
	wimax = wwan,
	rfkill,
	micmute,

	//extra keycodes that are usually not used in any way and just here for completeness.
	ok = 352,
	select,
	kgoto,
	clear,
	power2,
	option,
	info,
	time,
	vendor,
	archive,
	program,
	channel,
	favorites,
	epg,
	pvr,
	mhp,
	language,
	title,
	subtitle,
	angle,
	zoom,
	mode,
	keyboard,
	screen,
	pc,
	tv,
	tv2,
	vcr,
	vcr2,
	sat,
	sat2,
	cd,
	tape,
	radio,
	tuner,
	player,
	text,
	dvd,
	aux,
	mp3,
	audio,
	video,
	directory,
	list,
	memo,
	calendar,
	red,
	green,
	yellow,
	blue,
	channelup,
	channeldown,
	first,
	last,
	ab,
	next,
	restart,
	slow,
	shuffle,
	kbreak,
	previous,
	digits,
	teen,
	twen,
	videophone,
	games,
	zoomin,
	zoomout,
	zoomreset,
	wordprocessor,
	editor,
	spreadsheet,
	graphicseditor,
	presentation,
	database,
	news,
	voicemail,
	addressbook,
	messenger,
	displaytoggle,
	brightnessToggle = displaytoggle,
	spellcheck,
	logoff,

	dollar,
	euro,

	frameback,
	frameforward,
	contextMenu,
	mediaRepeat,
	channelsup10,
	channelsdown10,
	images,

	delEol = 0x1c0,
	delEos,
	insLine,
	delLine,

	fn = 0x1d0,
	fnEsc,
	fnF1,
	fnF2,
	fnF3,
	fnF4,
	fnF5,
	fnF6,
	fnF7,
	fnF8,
	fnF9,
	fnF10,
	fnF11,
	fnF12,
	fn1,
	fn2,
	fnD,
	fnE,
	fnF,
	fnS,
	fnB,

	brlDot1 = 0x1f1, 
	brlDot2,
	brlDot3,
	brlDot4,
	brlDot5,
	brlDot6,
	brlDot7,
	brlDot8,
	brlDot9,
	brlDot10,

	numeric0 = 0x200,
	numeric1,
	numeric2,
	numeric3,
	numeric4,
	numeric5,
	numeric6,
	numeric7,
	numeric8,
	numeric9,
	numericStar,
	numericPound,
	numericA,
	numericB,
	numericC,
	numericD,

	cameraFocus,
	wpsButton,

	touchpadToggle,
	touchpadOn,
	touchpadOff,

	cameraZoomin,
	cameraZoomout,
	cameraUp,
	cameraDown,
	cameraLeft,
	cameraRight,

	attendantOn,
	attendantOff,
	attendantToggle,
	lightsToggle,

	alsToggle = 0x230,

	buttonconfig = 0x240,
	taskmanager,
	journal,
	controlpanel,
	appselect,
	screensaver,
	voicecommand,

	brightnessMin = 0x250,
	brightnessMax,

	kbdinputassistPrev = 0x260,
	kbdinputassistNext,
	kbdinputassistPrevgroup,
	kbdinputassistNextgroup,
	kbdinputassistAccept,
	kbdinputassistCancel,

	rightUp,
	rightDown,
	leftUp,
	leftDown,

	rootMenu,
	mediaTopMenu,
	numeric11,
	numeric12,

	audioDesc,
	mode3d,
	nextFavorite,
	stopRecord,
	pauseRecord,
	vod,
	unmute,
	fastreverse,
	slowreverse,

	data = fastreverse,
	
	extra = 0x10000,
};

static_assert(static_cast<unsigned int>(Keycode::micmute) == 248, "Wrong enum numbering!");
static_assert(static_cast<unsigned int>(Keycode::data) == 0x275, "Wrong enum numbering!");

constexpr struct Mapping
{
	Keycode keycode;
	const char* name;
} mappings[] = 
{
	{Keycode::a, "a"},
	{Keycode::b, "b"},
	{Keycode::c, "c"},
	{Keycode::d, "d"},
	{Keycode::e, "e"},
	{Keycode::f, "f"},
	{Keycode::g, "g"},
	{Keycode::h, "h"},
	{Keycode::i, "i"},
	{Keycode::j, "j"},
	{Keycode::k, "k"},
	{Keycode::l, "l"},
	{Keycode::m, "m"},
	{Keycode::n, "n"},
	{Keycode::o, "o"},
	{Keycode::p, "p"},
	{Keycode::q, "q"},
	{Keycode::r, "r"},
	{Keycode::s, "s"},
	{Keycode::t, "t"},
	{Keycode::u, "u"},
	{Keycode::v, "v"},
	{Keycode::w, "w"},
	{Keycode::x, "x"},
	{Keycode::y, "y"},
	{Keycode::z, "z"},

	{Keycode::k1, "1"},
	{Keycode::k2, "2"},
	{Keycode::k3, "3"},
	{Keycode::k4, "4"},
	{Keycode::k5, "5"},
	{Keycode::k6, "6"},
	{Keycode::k7, "7"},
	{Keycode::k8, "8"},
	{Keycode::k9, "9"},
	{Keycode::k0, "0"},

	{Keycode::enter, "enter"},
	{Keycode::esc, "escape"},
	{Keycode::backspace, "backspace"},
	{Keycode::tab, "tab"},
	{Keycode::space, "space"},
	{Keycode::minus, "minus"},
	{Keycode::equal, "equal"},
	{Keycode::leftbrace, "leftbrace"},
	{Keycode::rightbrace, "rightbrace"},
	{Keycode::backslash, "backslash"},
	{Keycode::nonushash, "nonushash"},
	{Keycode::semicolon, "semicolon"},
	{Keycode::aporstrophe, "aporstrophe"},
	{Keycode::grave, "grave"},
	{Keycode::comma, "comma"},
	{Keycode::period, "period"},
	{Keycode::slash, "slash"},

	{Keycode::capslock, "capslock"},

	{Keycode::f1, "f1"},
	{Keycode::f2, "f2"},
	{Keycode::f3, "f3"},
	{Keycode::f4, "f4"},
	{Keycode::f5, "f5"},
	{Keycode::f6, "f6"},
	{Keycode::f7, "f7"},
	{Keycode::f8, "f8"},
	{Keycode::f9, "f9"},
	{Keycode::f10, "f10"},
	{Keycode::f11, "f11"},
	{Keycode::f12, "f12"},

	{Keycode::print, "print"},
	{Keycode::scrollock, "scrolllock"},
	{Keycode::pause, "pause"},
	{Keycode::insert, "insert"},

	{Keycode::home, "home"},
	{Keycode::pageup, "pageup"},
	{Keycode::del, "delete"},
	{Keycode::end, "end"},
	{Keycode::pagedown, "pagedown"},
	{Keycode::right, "right"},
	{Keycode::left, "left"},
	{Keycode::up, "up"},
	{Keycode::down, "down"},

	{Keycode::down, "numlock"},

	{Keycode::kpdivide, "kpdivide"},
	{Keycode::kpmultiply, "kpmultiply"},
	{Keycode::kpminus, "kpminus"},
	{Keycode::kpplus, "kpplus"},
	{Keycode::kpenter, "kpenter"},
	{Keycode::kp1, "kp1"},
	{Keycode::kp2, "kp2"},
	{Keycode::kp3, "kp3"},
	{Keycode::kp4, "kp4"},
	{Keycode::kp5, "kp5"},
	{Keycode::kp6, "kp6"},
	{Keycode::kp7, "kp7"},
	{Keycode::kp8, "kp8"},
	{Keycode::kp9, "kp9"},
	{Keycode::kp0, "kp0"},

	{Keycode::nonusbackslash, "nonusbackslash"},
	{Keycode::application, "application"},
	{Keycode::power, "power"},

	{Keycode::equals, "equals"},
	{Keycode::f13, "f13"},
	{Keycode::f14, "f14"},
	{Keycode::f15, "f15"},
	{Keycode::f16, "f16"},
	{Keycode::f17, "f17"},
	{Keycode::f18, "f18"},
	{Keycode::f19, "f19"},
	{Keycode::f20, "f20"},
	{Keycode::f21, "f21"},
	{Keycode::f22, "f22"},
	{Keycode::f23, "f23"},
	{Keycode::f24, "f24"},
};

const char* keycodeName(Keycode keycode)
{

	for(auto& m : mappings) if(m.keycode == keycode) return m.name;
	return "";
}

Keycode keycodeFromName(const char* name)
{
	for(auto& m : mappings) if(!std::strcmp(m.name, name)) return m.name;
	return Keycode::none;
}

}
